type FileMode = variant {
    Private;
    Public;
    Restricted
};

type ElementId = variant {
    Some : vec nat8;
    None;
};


type FileNode = record {
    //    id : vec nat8;
    name: text;
    element_tree: ElementId;
};


type CreateFileData = record {
    id : vec nat8;
    name: text;
    directory_id : vec nat8;
    parent_id : vec nat8;
    children: opt vec text;
};

type CreateDirectoryData = record {
    id : vec nat8;
    name: text;
    files: Tree;
};

type Tree = record {
    //    root : opt vec nat8;
    vertices : vec record {
        vec nat8;
        FileNode
    };
    adjacency : vec record {
        vec nat8;
        vec vec nat8;
    };
};


type FileDirectory = opt variant {
    id : vec nat8;
    name: text;
    files: Tree;
};

type FileDirectoryUpdate = variant {
    name: text;
    files: Tree;
};

type Status = variant {
    Success;
    UnAuthorized;
    InvalidInput;
};


type UserProfile = record {
//    principal:hex;
    image: opt vec nat8;
    username: opt text;
    last_name: opt text;
    first_name: opt text;
    birthdate: opt text;
    email: opt text;
    emails: opt vec text;
}

service : {
    "create_file": (create_file_data : CreateFileData) -> ();
    "create_directory": (
        //    create_file_data : FileDirectoryUpdate
    ) -> (opt FileDirectory);
    "get_directories": () ->(FileDirectory) query;
    "register": (text) -> (text);
    "test" : (data : text) -> (Status);
    "update_profile" : (data : UserProfile) -> (Status);

}

