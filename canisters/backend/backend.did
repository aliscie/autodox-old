type FileMode = variant {
    Private;
    Public;
    Restricted;
};

type FileNode = record {
    id : text;
    name: text;
    element_tree: opt text;
    file_mode: FileMode;
    //    users_can_see: vec UserQuery;
};

type FileTree = record {
    root : opt text;
    vertices : vec record {
        text;
        FileNode
    };
    adjacency : vec record {
        text;
        vec text;
    };
};

type EditorElement = record {
    id : text;
    content : text;
    tag: opt text;
    attrs: vec record {
        text;
        text
    };
};

type EditorTree = record {
    root : opt text;
    vertices : vec record {
        text;
        EditorElement
    };
    adjacency : vec record {
        text;
        vec text;
    };
};

type FileDirectory = record {
    id : text;
    name: text;
    files: FileTree;
};

type UserQuery = record {
    address: text;
    username: opt text;
    image: opt vec nat8;
    last_name: opt text;
    first_name: opt text;
    birthdate: opt text;
    email: opt text;
    emails: opt vec text;
};


type ElementTree = record {
    id: text;
    elements: EditorTree;
};

type getElementTreesResult = variant {
    Ok: vec record {
        text;
        ElementTree
    };
    Err: text
};

    //type getFile = variant {
    //    Ok: record {
    //        FileNode;
    //        ElementTree
    //    };
    //    Err: text
    //};

service : {
    "register": (text) -> (text);
    "update_profile" : (text) -> (text);
    "get_profile" : () -> (opt UserQuery) query;
    "create_file": (text) -> (text);
    "update_file": (text) -> (text);
    "get_directory": (text) -> (opt FileDirectory) query;
    "rename_file": (text) -> (text);
    "delete_file": (text) -> (text);
    "create_directory": () -> (text);
    "get_directories": () ->(opt FileDirectory) query;
    "change_directory": (text) -> (text);
    "get_users" : () -> (vec UserQuery) query;
    "group_update": (text) -> (opt text);
    "get_file": (text) -> (variant {
        Ok: record {
            FileNode;
            ElementTree
        };
        Err: text
    }) query;
    "create_element_tree" : (text) -> (variant {
        Ok: text;
        Err: text
    });
    "get_element_trees": () -> (getElementTreesResult) query;
    //    "get_element_trees": () -> (variant {
    //        Ok: ElementTree;
    //        Err: text
    //    }) query;
}

