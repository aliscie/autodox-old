type FileMode = variant {
    Private;
    Public;
    Restricted
};


type FileNode = record {
    id : vec nat8;
    name: text;
    element_tree: opt vec nat8;
};


type CreateFileData = record {
    id : vec nat8;
    name: text;
    directory_id : vec nat8;
    parent_id : vec nat8;
    children: opt vec text;
};

type CreateDirectoryData = record {
    id : vec nat8;
    name: text;
    files: Tree;
};

type Tree = record {
    root : opt vec nat8;
    vertices : vec record {
        vec nat8;
        FileNode
    };
    adjacency : vec record {
        vec nat8;
        vec vec nat8;
    };
};


type FileDirectory = opt record {
    id : vec nat8;
    name: text;
    files: Tree;
};

type UpdateRespone = record {
    status : Status;
    message: text;
};

type FileDirectoryUpdate = variant {
    name: text;
    files: Tree;
};

type Status = variant {
    Success;
    UnAuthorized;
    InvalidInput;
};


type User = record {
    image: vec nat8;
    username: text;
};


type QueryUser = opt record {
    image: opt vec nat8;
    username: opt text;
};

service : {
    "create_file": (create_file_data : CreateFileData) -> ();
    "create_directory": (
        //    create_file_data : FileDirectoryUpdate
    ) -> (UpdateRespone);
    "get_directories": () ->(FileDirectory) query;
    "register": (text) -> (UpdateRespone);
    "test_ic" : () -> (text) query;
    "update_profile" : (User) -> (UpdateRespone);
    "get_profile" : () -> (QueryUser) query;
}

