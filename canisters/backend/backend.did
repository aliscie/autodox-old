type FileMode = variant {
    Private;
    Public;
    Restricted
};


type FileNode = record {
    id: text;
    name: text;
    element_tree: text;
};


type CreateFileData = record {
    id: text;
    name: text;
    mode: FileMode;
    directory_id: text;
    parent_id: text;
    children: opt vec text;
};

type CreateDirectoryData = record {
    id: text;
    name: text;
//    files: opt vec (text, FileNode);
};

type Tree = record {
    root : opt text;
    vertices : vec record {
        text;
        FileNode
    };
    adjacency : vec record {
        text;
        vec text
    };
};


type FileDirectory = variant {
    id: text;
    name: text;
    files: Tree;
}

service : {
    "create_file": (CreateFileData) -> (text);
    "create_directory": (CreateDirectoryData) -> (text);
    "register": (text) -> (text);
    //    "get_directories": () ->(vec FileDirectory) query;
}

