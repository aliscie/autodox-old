type FileMode = variant {
    Private;
    Public;
    Restricted
};

type ElementId = variant {
    Some : vec nat8;
    None;
};

type FileNode = record {
    // id : vec nat8;
    name: text;
    element_tree: ElementId;
};

type CreateFileData = record {
    id : vec nat8;
    name: text;
    directory_id : vec nat8;
    parent_id : vec nat8;
    children: opt vec text;
};

type CreateDirectoryData = record {
    id : vec nat8;
    name: text;
    files: Tree;
};

type Tree = record {
    // root : opt vec nat8;
    vertices : vec record {
        vec nat8;
        FileNode
    };
    adjacency : vec record {
        vec nat8;
        vec vec nat8;
    };
};

type FileDirectory = opt record {
    id : vec nat8;
    name: text;
    files: Tree;
};

type ResponseQuery = record {
    status : Status;
    message: text;
};

type Status = variant {
    Success;
    UnAuthorized;
    InvalidInput;
};

type UserUpdate = record {
    image: vec nat8;
    username: text;
};

type UserQuery = opt record {
    image: opt vec nat8;
    username: opt text;
};

service : {
    "create_file": (create_file_data : CreateFileData) -> ();
    "create_directory": () -> (ResponseQuery);
    "get_directories": () ->(FileDirectory) query;
    "register": (text) -> (ResponseQuery);
    "test_ic" : () -> (text) query;
    "update_profile" : (UserUpdate) -> (ResponseQuery);
    "get_profile" : () -> (UserQuery) query;
    "get_current_user" : () -> (UserQuery) query;
}
