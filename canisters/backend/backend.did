type FileMode = variant {
    Private;
    Public;
    Restricted;
};

type FileNode = record {
    id : text;
    name: text;
    element_tree: opt text;
    test: text;
    file_mode: FileMode;
};

type Tree = record {
    root : opt text;
    vertices : vec record {
        text;
        FileNode
    };
    adjacency : vec record {
        text;
        vec text;
    };
};

type FileDirectory = record {
    id : text;
    name: text;
    files: Tree;
};

type UserQuery = record {
    image: opt vec nat8;
    username: opt text;
    address: text;
};

service : {
    "register": (text) -> (text);
    "update_profile" : (text) -> (text);
    "get_profile" : () -> (opt UserQuery) query;
    "create_file": (text) -> (text);
    "update_file": (text) -> (text);
    "get_directory": (text) -> (opt FileDirectory) query;
    "rename_file": (text) -> (text);
    "delete_file": (text) -> (text);
    "create_directory": () -> (text);
    "get_directories": () ->(opt FileDirectory) query;
    "change_directory": (text) -> (text);
}
