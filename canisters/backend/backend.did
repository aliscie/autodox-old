type Attrs = variant { Src; Style; Href };
type BackendError = variant { UserNotRegisted; DirectoryDoesNotExist };
type CreateDirectoryResponse = variant {
  AlreadyExist;
  Success;
  UserNotRegisted;
};
type EditorElement = record {
  id : text;
  attrs : vec record { Attrs; text };
  "text" : text;
};
type ElementTree = record { id : text; elements : Tree };
type FileDirectory = record { id : text; files : Tree_1; name : text };
type FileMode = variant { Public; Private; Restricted };
type FileNode = record { id : text; name : text; element_tree : opt text };
type FileNodeCreate = record {
  id : text;
  name : text;
  mode : FileMode;
  directory_id : text;
  parent_id : text;
  children : opt vec text;
};
type RegisterResponse = variant {
  AlreadyRegistered : record { user_name : text };
  Success : record { user_name : text };
  UserNameAlreadyInUse;
};
type Result = variant { Ok; Err : BackendError };
type Result_1 = variant { Ok : vec FileDirectory; Err : BackendError };
type Tree = record {
  root : opt text;
  vertices : vec record { text; EditorElement };
  adjacency : vec record { text; vec text };
};
type Tree_1 = record {
  root : opt text;
  vertices : vec record { text; FileNode };
  adjacency : vec record { text; vec text };
};
service : () -> {
  create_directory : (text, text) -> (CreateDirectoryResponse);
  create_file : (FileNodeCreate) -> (Result);
  read_element : (text) -> (opt ElementTree) query;
  read_files : () -> (Result_1) query;
  register : (text) -> (RegisterResponse);
}