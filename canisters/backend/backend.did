type FileDirectory = record { id : text; files : Tree; name : text };
type FileMode = variant { Private; Public; Restricted };
type FileNode = record {
  id : text;
  name : text;
  file_mode : FileMode;
  element_tree : opt text;
};
type Result = variant { Ok : text; Err : text };
type Tree = record {
  root : opt text;
  vertices : vec record { text; FileNode };
  adjacency : vec record { text; vec text };
};
type UserQuery = record {
  username : opt text;
  birthdate : opt text;
  emails : opt vec text;
  email : opt text;
  address : text;
  first_name : opt text;
  last_name : opt text;
  image : opt vec nat8;
};
service : {
  change_directory : (text) -> (text);
  create_directory : () -> (text);
  create_element_tree : (text) -> (Result);
  create_file : (text) -> (text);
  delete_file : (text) -> (text);
  get_directories : () -> (opt FileDirectory) query;
  get_directory : (text) -> (opt FileDirectory) query;
  get_element_tree : (text) -> (Result) query;
  get_element_trees : () -> (Result) query;
  get_file : (text) -> (Result) query;
  get_profile : () -> (opt UserQuery) query;
  get_users : () -> (vec UserQuery) query;
  group_update : (text) -> (opt text);
  register : (text) -> (text);
  rename_file : (text) -> (text);
  update_file : (text) -> (text);
  update_profile : (text) -> (text);
}