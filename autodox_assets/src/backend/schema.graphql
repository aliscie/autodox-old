type Message {
  sender: String
  message: String
}

type Collaporate {
  message: String
  sender: String
}

type Query {
  # ### filtering options
  # * **Ecample**: `users(input:{filter:"{'id__gt__':2}"})` instead of `__gt__` you can use
  # - `__gt__` describes greater than (>)
  # - `__ge__` describes greater than or equal to (>=)
  # - `__lt__` describes less than operator(<)
  # - `__le__` descries less than or equal to (<=)
  # - `__contains__`
  # - `__ne__` describes not equal to operator(!=)
  _unused: Boolean
  hello: String!
  users(input: ListInput): [Users]
  files(input: ListInput): [Files]
}

type Mutation {
  _unused: Boolean
  send(number: String!): String
  collaborate(properties: String!): String
  signup(
    username: String!
    password: String!
    birth_date: String
    email: String
  ): Boolean
  signin(username: String!, password: String!): String
  google_auth(token: String!): String
  file(
    id: Int
    name: String!
    content: String
    parent_id: Int
    owner_id: Int
  ): String!
}

type Subscription {
  _unused: Boolean

  # - chat app live time data
  chat: Message

  # - This returns `1, 2, 3, 4,`
  counter: Int!
  collaborate: Collaporate
}

input ListInput {
  from: Int
  to: Int
  filter: String
  filter_operator: FilterOperator
  search: String
}

enum FilterOperator {
  and
  or
  not
}

type Users {
  items: [Files]
  id: Int
  username: String
  birth_date: String
  email: String
  password: String
}

type Files {
  owner: Users
  children: [Files]
  id: Int
  name: String
  content: String
  time_created: String
  owner_id: Int
}