//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;
use sea_orm::{TryGetable, Value, TryGetError};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "file_adjacency")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub tree_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub parent_id: Uuid,
    pub child_id: UuidVec,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::file_node::Entity",
        from = "Column::ParentId",
        to = "super::file_node::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    FileNode,
    #[sea_orm(
        belongs_to = "super::file_tree::Entity",
        from = "Column::TreeId",
        to = "super::file_tree::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    FileTree,
}

impl Related<super::file_node::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FileNode.def()
    }
}

impl Related<super::file_tree::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FileTree.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
 
#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub struct UuidVec(pub Vec<Uuid>);
 

impl From<UuidVec> for Value {
    fn from(source: UuidVec) -> Self {
        Value::String(serde_json::to_string(&source).ok().map(Box::new))
    }
}

impl TryGetable for UuidVec {
    fn try_get(res: &QueryResult, pre: &str, col: &str) -> Result<Self, TryGetError> {
        let json_str: String = res.try_get(pre, col).map_err(TryGetError::DbErr)?;
        serde_json::from_str(&json_str).map_err(|e| TryGetError::DbErr(DbErr::Json(e.to_string())))
    }
}

impl sea_query::ValueType for UuidVec {
    fn try_from(v: Value) -> Result<Self, sea_query::ValueTypeErr> {
        match v {
            Value::String(Some(x)) => Ok(UuidVec(
                serde_json::from_str(&x).map_err(|_| sea_query::ValueTypeErr)?,
            )),
            _ => Err(sea_query::ValueTypeErr),
        }
    }

    fn type_name() -> String {
        stringify!(UuidVec).to_owned()
    }

    fn column_type() -> sea_query::ColumnType {
        sea_query::ColumnType::String(None)
    }
}
