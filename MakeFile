run_web:
	cd frontend && yarn dev

run_editor:
	cd frontend && yarn dev --editor

run_desktop:
	cargo tauri dev


build:
	cargo tauri build

kill:
	kill -INT $(lsof -t -i :8080)
	# for window netstat -ano | findstr :8080

kill_dfx:
	killall dfx replica

update:
	cargo update

install_cli:
	cargo install tauri-cli

clean:
	cargo clean

get_principal:
	dfx identity get-principal

create_token:
	dfx canister create token

dfx_owner:
	OWNER_PUBLIC_KEY="principal \"$( \dfx identity get-principal )\""

get_dfx_balance:
	dfx canister call token balance "( $OWNER_PUBLIC_KEY )"


deploy:
	# make sure to run dfx start in order to start the simulated blockchain locally
	# make sure to have Cargo.lock files so the dfx can install from it because dfx does not install from Cargo.toml
	#dfx deploy registrar --with-cycles 10000000000000
	#def start --backendyes
	dfx deploy


deploy_internet:
	dfx deploy internet_identity

watch_fe:
	cargo watch -w "./frontend" -s "cd frontend; yarn wasm ; yarn run build ; cd ../;  dfx deploy "

deploy_be:
	dfx deploy backend

watch_be:
	cargo watch -w "./canisters" -s "dfx deploy"

reset_cargo:
	rm -rf ~/.cargo/registry/index/*
	rm -rf ~/.cargo/.package-cache
	cargo clean
	cargo update